
         [ REST API / Controller ]
                     ‚îÇ
                     ‚ñº
        (Creates ReserveCourseCommand)
                     ‚îÇ
                     ‚ñº
        [ Kafka Producer ‚Üí Topic: course-reservation-commands ]
                     ‚îÇ
                     ‚ñº
        [ Kafka Consumer (CourseReservationService) ]
                     ‚îÇ
         Executes Command via Handler
                     ‚îÇ
                     ‚ñº
        [ Kafka Producer ‚Üí Topic: course-reservation-events ]
                     ‚îÇ
                     ‚ñº
        [ Kafka Sink Connector ]
                     ‚îÇ
                     ‚ñº
           Inserts into Database (course_reservations)

[Controller]
    ‚Üì
[StudentService]
    ‚Üì
[CourseReservationCommandProducer] ‚Üí topic: course-reservation-commands
    ‚Üì
[CommandListener] ‚Üí executes ReserveCourseCommand
    ‚Üì
[CourseReservationService.reserveCourse()]
    ‚Üì
[CourseReservationEvent] created
    ‚Üì
Publish ‚Üí topic: course-reservation-events
    ‚Üì
[Kafka Connect Sink Connector]
    ‚Üì
[PostgreSQL] course_reservation_events table



http://localhost:8080/swagger-ui/index.html
http://localhost:8080/api/auth/login
{
  "firstName": "string",
  "lastName": "string",
  "email": "string",
  "password": "string"
}

curl http://localhost:8083/connectors
curl -X POST -H "Content-Type: application/json" --data "@src\connectors\course-reservation-sink.json" http://localhost:8083/connectors
curl http://localhost:8083/connectors/course-reservation-sink/status

http://localhost:8080/api/students/1/courses/1/reserve

docker run -d ^
  -e MYSQL_ROOT_PASSWORD=secret ^
  -e MYSQL_DATABASE=tododb ^
  --name mysqldb ^
  -p 3307:3306 ^
  mysql:latest


curl -H "Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhaXNhbGVoQGVqYWRhLmNvbSIsImlhdCI6MTc2MDU1NjcxMywiZXhwIjoxNzYwNTU3NjEzfQ.vhF8mlxNP3dhu6Uh3EQQT37WCewpUBKpsCo1tRLk46w" \
     "http://localhost:8080/api/students/reserve?studentId=1&courseId=1"

+---------------------------------------------------------------+
|                         CourseCenter                          |
|---------------------------------------------------------------|
|  Course Service       Student Service       Reservation Service|
|     (API)                 (API)                   (API)        |
+---------------------------------------------------------------+
             |                        |
             |                        | emits
             |                        v
             |               Kafka Topics (Event Bus)
             |                     |
             |                     v
             |             Notification Service
             |                 (Consumer)
             +----------------------+

macro (system-level) to micro (internal design)
Reservation Service ‚Üí emits event ‚Üí Kafka ‚Üí Notification Service ‚Üí sends message to student
-----------------------------------------------------------------------------------------------------
Why It‚Äôs Powerful
Loose coupling:
Reservation Service doesn‚Äôt know who listens. It just emits an event.
Notification Service can be added or removed without modifying Reservation logic.

Scalability:
Each service can scale independently (e.g., more Notification Service instances if traffic spikes).

Extensibility:
You can add more consumers later (Analytics Service, Audit Service, etc.) without touching producers.

-----------------------------------------------------------------------------------------------------------

üîÑ Flow

Reservation Service (Producer)

Converts the new reservation into an event.

Sends JSON to Kafka topic.

Kafka Broker

Stores and distributes events.

Notification Service (Consumer)

Listens to the same topic.

Reads the event, processes it, and triggers the correct notification (email/SMS/etc.).

+---------------------------------------------------+
|               Notification Service                |
|---------------------------------------------------|
| 1. Kafka Consumer Layer                           |
|    - Listens to events from Kafka                 |
|    - Parses event JSON ‚Üí Java object              |
|                                                   |
| 2. Event Processing Layer                         |
|    - Routes event based on type                   |
|    - Handles logic like "Reservation Created"     |
|                                                   |
| 3. Notification Channels Layer                    |
|    - EmailSenderService ‚Üí uses SMTP               |
|    - SmsSenderService ‚Üí uses Twilio API           |
|    - InAppNotificationService ‚Üí stores in DB      |
|                                                   |
| 4. Persistence Layer (optional)                   |
|    - NotificationRepository (for history)         |
|                                                   |
| 5. REST API Layer (optional)                      |
|    - GET /notifications?studentId=10              |
|      ‚Üí Returns unread notifications               |
+---------------------------------------------------+
Example Event Lifecycle

Here‚Äôs the end-to-end event journey:

Step	Component	Action
1	Student calls POST /reserve	Create new reservation
2	Reservation Service	Saves to DB and emits ReservationCreatedEvent
3	Kafka	Stores the event in topic
4	Notification Service	Listens and consumes the event
5	Notification Service	Sends email to student
6	(Optional) UI	Displays ‚ÄúReservation Successful‚Äù + sends confirmation email